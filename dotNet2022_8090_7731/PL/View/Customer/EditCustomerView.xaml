<UserControl x:Class="PL.View.EditCustomerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             mc:Ignorable="d" 
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>
        <Style TargetType="TextBox" BasedOn="{StaticResource MaterialDesignOutlinedTextBox}">
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="AcceptsReturn" Value="True"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="Margin" Value="0,15" />
            <Setter Property="Width" Value="200" />
            <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True" />
        </Style>

        <Style TargetType="Button" BasedOn="{StaticResource MaterialDesignFlatButton}">
            <Setter Property="HorizontalAlignment" Value="Center"/>
        </Style>

        <Style TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignTextBlock}">
            <Setter Property="Margin" Value="0,15" />
            <Setter Property="Width" Value="200" />
            <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True" />
        </Style>

        <Style TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignComboBox}">
            <Setter Property="Width" Value="200" />
            <Setter Property="Margin" Value="0,15" />
        </Style>

    </UserControl.Resources>

    <StackPanel>

        <TextBox Text="{Binding Customer.Id ,
                                UpdateSourceTrigger=PropertyChanged}"
                 materialDesign:HintAssist.Hint="Id"
                 IsEnabled="False" />

        <TextBox Text="{Binding Customer.Name,
            ValidatesOnDataErrors=true, 
            NotifyOnValidationError=true,
            UpdateSourceTrigger=PropertyChanged}"
                  materialDesign:HintAssist.Hint="Name"
                  materialDesign:TextFieldAssist.HasClearButton="True"  />

        <TextBox Text="{Binding Customer.Phone, 
            ValidatesOnDataErrors=true,
            NotifyOnValidationError=true,
            UpdateSourceTrigger=PropertyChanged}"
                  materialDesign:HintAssist.Hint="Phone"
                  materialDesign:TextFieldAssist.HasClearButton="True"  />

        <TextBox Text="{Binding Customer.Location,
                                UpdateSourceTrigger=PropertyChanged }"
                 materialDesign:HintAssist.Hint="Location"
                 IsEnabled="False"/>

        <Label>For:</Label>
        <ListView Grid.Row="1"  
                  ItemsSource="{Binding Customer.LForCustomer}"
                  x:Name="ParcelsForCustomerListView">

            <ListView.View>
                <GridView>
                    <GridViewColumn
                        DisplayMemberBinding="{Binding Id}"
                        Header="Id" />
                    <GridViewColumn
                        DisplayMemberBinding="{Binding Weight}"
                        Header="Weight" />
                    <GridViewColumn
                        DisplayMemberBinding="{Binding MPriority}"
                        Header="MPriority" />
                    <GridViewColumn
                        DisplayMemberBinding="{Binding PStatus}"
                        Header="Parcel Status" />
                    <GridViewColumn
                        DisplayMemberBinding="{Binding OnTheOtherHand.Id}"
                        Header="Sender Id" />
                    <GridViewColumn
                        DisplayMemberBinding="{Binding OnTheOtherHand.Name}"
                        Header="Sender Name" />
                </GridView>
            </ListView.View>

            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick">
                    <i:InvokeCommandAction 
                        Command="{Binding ShowParcelOfCustomerCommand}"
                        CommandParameter="{Binding ElementName=ParcelsForCustomerListView, Path=SelectedItem}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </ListView>

        <Label>From:</Label>
        <ListView Grid.Row="1"  
                  ItemsSource="{Binding Customer.LFromCustomer}"
                  x:Name="ParcelsFromCustomerListView">
            <ListView.View>
                <GridView>
                    <GridViewColumn
                        DisplayMemberBinding="{Binding Id}"
                        Header="Id" />
                    <GridViewColumn
                        DisplayMemberBinding="{Binding Weight}"
                        Header="Weight" />
                    <GridViewColumn
                        DisplayMemberBinding="{Binding MPriority}"
                        Header="MPriority" />
                    <GridViewColumn
                        DisplayMemberBinding="{Binding PStatus}"
                        Header="PStatus" />
                    <GridViewColumn
                        DisplayMemberBinding="{Binding OnTheOtherHand.Id}"
                        Header="Getter Id" />
                    <GridViewColumn
                        DisplayMemberBinding="{Binding OnTheOtherHand.Name}"
                        Header="Getter Name" />
                </GridView>
            </ListView.View>
           
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick">
                    <i:InvokeCommandAction 
                        Command="{Binding ShowParcelOfCustomerCommand}"
                        CommandParameter="{Binding ElementName=ParcelsFromCustomerListView, Path=SelectedItem}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </ListView>

        <Button Content="Update"
                Command="{Binding UpdateCustomerCommand}"/>

        <Button Content="Delete"
                Command="{Binding DeleteCustomerCommand}"
                CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}}"/>

        <Button Content="close" 
                Command="{Binding CloseWindowCommand }"
                CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}}"/>

    </StackPanel>
</UserControl>
